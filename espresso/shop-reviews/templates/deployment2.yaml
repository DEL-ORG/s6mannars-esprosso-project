apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name2 }}
  labels:
    app: {{ .Values.labels.app1 }}
    version: {{ .Values.labels.version2 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Values.labels.app1 }}
      version: {{ .Values.labels.version2 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: {{ .Values.labels.app1 }}
        version: {{ .Values.labels.version2 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccount.name2 }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          
          # calling postgres secret 
          env:
            - name: POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                 name: postgres-credentials
                 key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: POSTGRES_DATABASE
              valueFrom:
               secretKeyRef:
                name: postgres-credentials
                key: database
          env:
            - name: {{ .Values.env.key2 }}
              value: {{ .Values.env.value2 }}
          ports:
            - name: http
              containerPort: {{ .Values.service.containerPort}}
              protocol: TCP
          {{- if .Values.probe.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
           {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
